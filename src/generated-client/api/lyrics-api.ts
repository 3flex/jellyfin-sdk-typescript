/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 *
 * Jellyfin API
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LyricDto } from '../models';
// @ts-ignore
import { ProblemDetails } from '../models';
// @ts-ignore
import { RemoteLyricInfoDto } from '../models';
/**
 * LyricsApi - axios parameter creator
 * @export
 */
export const LyricsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an external lyric file.
         * @param {string} itemId The item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLyrics: async (itemId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('deleteLyrics', 'itemId', itemId)
            const localVarPath = `/Audio/{itemId}/Lyrics`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Downloads a remote lyric.
         * @param {string} itemId The item id.
         * @param {string} lyricId The lyric id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadRemoteLyrics: async (itemId: string, lyricId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('downloadRemoteLyrics', 'itemId', itemId)
            // verify required parameter 'lyricId' is not null or undefined
            assertParamExists('downloadRemoteLyrics', 'lyricId', lyricId)
            const localVarPath = `/Audio/{itemId}/RemoteSearch/Lyrics/{lyricId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"lyricId"}}`, encodeURIComponent(String(lyricId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets an item\'s lyrics.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLyrics: async (itemId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('getLyrics', 'itemId', itemId)
            const localVarPath = `/Audio/{itemId}/Lyrics`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the remote lyrics.
         * @param {string} lyricId The remote provider item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRemoteLyrics: async (lyricId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lyricId' is not null or undefined
            assertParamExists('getRemoteLyrics', 'lyricId', lyricId)
            const localVarPath = `/Providers/Lyrics/{lyricId}`
                .replace(`{${"lyricId"}}`, encodeURIComponent(String(lyricId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search remote lyrics.
         * @param {string} itemId The item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRemoteLyrics: async (itemId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('searchRemoteLyrics', 'itemId', itemId)
            const localVarPath = `/Audio/{itemId}/RemoteSearch/Lyrics`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload an external lyric file.
         * @param {string} itemId The item the lyric belongs to.
         * @param {string} fileName Name of the file being uploaded.
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadLyrics: async (itemId: string, fileName: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('uploadLyrics', 'itemId', itemId)
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('uploadLyrics', 'fileName', fileName)
            const localVarPath = `/Audio/{itemId}/Lyrics`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (fileName !== undefined) {
                localVarQueryParameter['fileName'] = fileName;
            }


    
            localVarHeaderParameter['Content-Type'] = 'text/plain';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LyricsApi - functional programming interface
 * @export
 */
export const LyricsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LyricsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an external lyric file.
         * @param {string} itemId The item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLyrics(itemId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLyrics(itemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Downloads a remote lyric.
         * @param {string} itemId The item id.
         * @param {string} lyricId The lyric id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadRemoteLyrics(itemId: string, lyricId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LyricDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadRemoteLyrics(itemId, lyricId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets an item\'s lyrics.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLyrics(itemId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LyricDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLyrics(itemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets the remote lyrics.
         * @param {string} lyricId The remote provider item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRemoteLyrics(lyricId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LyricDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRemoteLyrics(lyricId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search remote lyrics.
         * @param {string} itemId The item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchRemoteLyrics(itemId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RemoteLyricInfoDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchRemoteLyrics(itemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload an external lyric file.
         * @param {string} itemId The item the lyric belongs to.
         * @param {string} fileName Name of the file being uploaded.
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadLyrics(itemId: string, fileName: string, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LyricDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadLyrics(itemId, fileName, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LyricsApi - factory interface
 * @export
 */
export const LyricsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LyricsApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an external lyric file.
         * @param {string} itemId The item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLyrics(itemId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteLyrics(itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Downloads a remote lyric.
         * @param {string} itemId The item id.
         * @param {string} lyricId The lyric id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadRemoteLyrics(itemId: string, lyricId: string, options?: any): AxiosPromise<LyricDto> {
            return localVarFp.downloadRemoteLyrics(itemId, lyricId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets an item\'s lyrics.
         * @param {string} itemId Item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLyrics(itemId: string, options?: any): AxiosPromise<LyricDto> {
            return localVarFp.getLyrics(itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets the remote lyrics.
         * @param {string} lyricId The remote provider item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRemoteLyrics(lyricId: string, options?: any): AxiosPromise<LyricDto> {
            return localVarFp.getRemoteLyrics(lyricId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search remote lyrics.
         * @param {string} itemId The item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRemoteLyrics(itemId: string, options?: any): AxiosPromise<Array<RemoteLyricInfoDto>> {
            return localVarFp.searchRemoteLyrics(itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload an external lyric file.
         * @param {string} itemId The item the lyric belongs to.
         * @param {string} fileName Name of the file being uploaded.
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadLyrics(itemId: string, fileName: string, body?: any, options?: any): AxiosPromise<LyricDto> {
            return localVarFp.uploadLyrics(itemId, fileName, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteLyrics operation in LyricsApi.
 * @export
 * @interface LyricsApiDeleteLyricsRequest
 */
export interface LyricsApiDeleteLyricsRequest {
    /**
     * The item id.
     * @type {string}
     * @memberof LyricsApiDeleteLyrics
     */
    readonly itemId: string
}

/**
 * Request parameters for downloadRemoteLyrics operation in LyricsApi.
 * @export
 * @interface LyricsApiDownloadRemoteLyricsRequest
 */
export interface LyricsApiDownloadRemoteLyricsRequest {
    /**
     * The item id.
     * @type {string}
     * @memberof LyricsApiDownloadRemoteLyrics
     */
    readonly itemId: string

    /**
     * The lyric id.
     * @type {string}
     * @memberof LyricsApiDownloadRemoteLyrics
     */
    readonly lyricId: string
}

/**
 * Request parameters for getLyrics operation in LyricsApi.
 * @export
 * @interface LyricsApiGetLyricsRequest
 */
export interface LyricsApiGetLyricsRequest {
    /**
     * Item id.
     * @type {string}
     * @memberof LyricsApiGetLyrics
     */
    readonly itemId: string
}

/**
 * Request parameters for getRemoteLyrics operation in LyricsApi.
 * @export
 * @interface LyricsApiGetRemoteLyricsRequest
 */
export interface LyricsApiGetRemoteLyricsRequest {
    /**
     * The remote provider item id.
     * @type {string}
     * @memberof LyricsApiGetRemoteLyrics
     */
    readonly lyricId: string
}

/**
 * Request parameters for searchRemoteLyrics operation in LyricsApi.
 * @export
 * @interface LyricsApiSearchRemoteLyricsRequest
 */
export interface LyricsApiSearchRemoteLyricsRequest {
    /**
     * The item id.
     * @type {string}
     * @memberof LyricsApiSearchRemoteLyrics
     */
    readonly itemId: string
}

/**
 * Request parameters for uploadLyrics operation in LyricsApi.
 * @export
 * @interface LyricsApiUploadLyricsRequest
 */
export interface LyricsApiUploadLyricsRequest {
    /**
     * The item the lyric belongs to.
     * @type {string}
     * @memberof LyricsApiUploadLyrics
     */
    readonly itemId: string

    /**
     * Name of the file being uploaded.
     * @type {string}
     * @memberof LyricsApiUploadLyrics
     */
    readonly fileName: string

    /**
     * 
     * @type {any}
     * @memberof LyricsApiUploadLyrics
     */
    readonly body?: any
}

/**
 * LyricsApi - object-oriented interface
 * @export
 * @class LyricsApi
 * @extends {BaseAPI}
 */
export class LyricsApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an external lyric file.
     * @param {LyricsApiDeleteLyricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LyricsApi
     */
    public deleteLyrics(requestParameters: LyricsApiDeleteLyricsRequest, options?: AxiosRequestConfig) {
        return LyricsApiFp(this.configuration).deleteLyrics(requestParameters.itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Downloads a remote lyric.
     * @param {LyricsApiDownloadRemoteLyricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LyricsApi
     */
    public downloadRemoteLyrics(requestParameters: LyricsApiDownloadRemoteLyricsRequest, options?: AxiosRequestConfig) {
        return LyricsApiFp(this.configuration).downloadRemoteLyrics(requestParameters.itemId, requestParameters.lyricId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets an item\'s lyrics.
     * @param {LyricsApiGetLyricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LyricsApi
     */
    public getLyrics(requestParameters: LyricsApiGetLyricsRequest, options?: AxiosRequestConfig) {
        return LyricsApiFp(this.configuration).getLyrics(requestParameters.itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets the remote lyrics.
     * @param {LyricsApiGetRemoteLyricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LyricsApi
     */
    public getRemoteLyrics(requestParameters: LyricsApiGetRemoteLyricsRequest, options?: AxiosRequestConfig) {
        return LyricsApiFp(this.configuration).getRemoteLyrics(requestParameters.lyricId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search remote lyrics.
     * @param {LyricsApiSearchRemoteLyricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LyricsApi
     */
    public searchRemoteLyrics(requestParameters: LyricsApiSearchRemoteLyricsRequest, options?: AxiosRequestConfig) {
        return LyricsApiFp(this.configuration).searchRemoteLyrics(requestParameters.itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload an external lyric file.
     * @param {LyricsApiUploadLyricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LyricsApi
     */
    public uploadLyrics(requestParameters: LyricsApiUploadLyricsRequest, options?: AxiosRequestConfig) {
        return LyricsApiFp(this.configuration).uploadLyrics(requestParameters.itemId, requestParameters.fileName, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
